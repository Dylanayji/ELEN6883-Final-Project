# -*- coding: utf-8 -*-
"""Seaport_Market_Activity_30-Day_Forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KhnC05-t0tquwYOH_AbCTGg7g6bgKAVa

**LLM Prompt Design and LLM integration**

1. Trading Volume Forecast
Predicts the next 30 days of daily NFT transaction counts using a weekly-seasonal Holt–Winters model, helping you anticipate shifts in overall market activity.
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# 1. Load the daily trading volume data
df = pd.read_csv('llm_daily_transactions.csv', parse_dates=['date'])
df = df.sort_values('date').set_index('date')

# 2. Fit Holt–Winters Exponential Smoothing with additive trend & multiplicative seasonality
series = df['transactions'].astype(float)
hw_model = ExponentialSmoothing(
    series,
    trend='add',
    seasonal='mul',         # multiplicative seasonality scales with level
    seasonal_periods=7      # weekly cycle
).fit(optimized=True)

# 3. Forecast the next 30 days
forecast_steps = 30
hw_forecast = hw_model.forecast(forecast_steps)
hw_forecast.name = 'forecast_volume'

# 4. Plot historical and forecasted values
plt.figure(figsize=(16, 8), dpi=120)
plt.plot(series.index, series, label='Historical Volume', lw=2)
plt.plot(hw_forecast.index, hw_forecast, '--', label='30-Day Forecast (Mul Seasonality)', lw=2)

# Enhance formatting
plt.title("Daily Trading Volume: Holt–Winters Forecast (Multiplicative Seasonality)", fontsize=18)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Number of Transactions", fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

"""2. Unique Buyers Forecast
Projects the daily number of distinct buyers over the next month with multiplicative seasonality, revealing trends in new and returning participant demand.
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# 1. Load raw Seaport sales data (must include 'buyer' and 'date')
df = pd.read_csv('nft_transactions_graphql.csv', parse_dates=['date'])

# 2. Compute daily unique buyer count
daily_buyers = (
    df.groupby(df['date'].dt.date)['buyer']
      .nunique()
      .reset_index(name='unique_buyers')
)
daily_buyers['date'] = pd.to_datetime(daily_buyers['date'])
daily_buyers.to_csv('daily_unique_buyers.csv', index=False)

# 3. Prepare the series
series = daily_buyers.set_index('date')['unique_buyers'].astype(float)

# 4. Fit Holt–Winters with additive trend & multiplicative weekly seasonality
hw_model = ExponentialSmoothing(
    series,
    trend='add',
    seasonal='mul',         # multiplicative seasonality to let spikes scale
    seasonal_periods=7      # weekly cycle
).fit(optimized=True)

# 5. Forecast the next 30 days
forecast = hw_model.forecast(30)
forecast.name = 'forecast_unique_buyers'

# 6. Plot historical & forecasted values
plt.figure(figsize=(14, 7), dpi=120)
plt.plot(series.index, series,         label='Historical Unique Buyers', lw=2)
plt.plot(forecast.index, forecast,     '--', label='30-Day Forecast',      lw=2)

plt.title("Daily Unique Buyers: Holt–Winters (Multiplicative) 30-Day Forecast", fontsize=16)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Number of Unique Buyers", fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

"""3. Unique Sellers Forecast
Forecasts the daily count of unique sellers for the upcoming 30 days using a multiplicative Holt–Winters approach, highlighting supply-side dynamics and potential inventory pressure.
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# 1. Load raw data and compute daily unique sellers
df = pd.read_csv('nft_transactions_graphql.csv', parse_dates=['date'])
daily_sellers = (
    df.groupby(df['date'].dt.date)['seller']
      .nunique()
      .reset_index(name='unique_sellers')
)
daily_sellers['date'] = pd.to_datetime(daily_sellers['date'])
daily_sellers.to_csv('daily_unique_sellers.csv', index=False)

# 2. Prepare the series
series = daily_sellers.set_index('date')['unique_sellers'].astype(float)

# 3. Fit Holt–Winters with additive trend & multiplicative weekly seasonality
hw_model = ExponentialSmoothing(
    series,
    trend='add',
    seasonal='mul',         # multiplicative seasonality to let spikes scale
    seasonal_periods=7      # weekly cycle
).fit(optimized=True)

# 4. Forecast the next 30 days
forecast = hw_model.forecast(30)
forecast.name = 'forecast_unique_sellers'

# 5. Plot historical & forecasted values
plt.figure(figsize=(14, 7), dpi=120)
plt.plot(series.index, series,         label='Historical Unique Sellers', lw=2)
plt.plot(forecast.index, forecast,     '--', label='30-Day Forecast',      lw=2)

plt.title("Daily Unique Sellers: Holt–Winters (Multiplicative) 30-Day Forecast", fontsize=16)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Number of Unique Sellers", fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()